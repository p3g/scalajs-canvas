package org.p3g.canvas.examples;import scala.scalajs.js.JSApp;import org.scalajs.dom;import scala.scalajs.js.timers._;import org.scalajs.dom.html.Canvas;import org.p3g.canvas.examples.objects.{Ball, Body};import org.p3g.canvas.examples.physics.{Position, Velocity, World};object Main extends JSApp {  def main: Unit = {    val world = new World(500,100);    val canvas = dom.document.createElement("canvas").asInstanceOf[Canvas];    canvas.width = (0.95 * dom.window.innerWidth).toInt;    val ctx = canvas.getContext("2d").asInstanceOf[dom.CanvasRenderingContext2D];    canvas.height = (0.95 * dom.window.innerHeight).toInt;    dom.document.body.appendChild(canvas);    var bodies:Seq[Body] = Seq( new Ball(100,      new Position(100,100),      new Velocity(1,1)    ));    setInterval(1000/30){      ctx.clearRect(0, 0, canvas.width, canvas.height);      bodies = world.forward(bodies);      drawBodies(ctx,bodies);    };  };  def drawBodies(context:dom.CanvasRenderingContext2D,bodies:Seq[Body]) = {    bodies.foreach( ( body:Body ) => drawBody(context,body) );  };  def drawBody(context:dom.CanvasRenderingContext2D,body:Body): Unit = {    context.beginPath();    context.arc( body.getPosition.x, body.getPosition.y, body.getSize, 0, 2 * Math.PI);    context.closePath();    context.stroke();  };  def randomBall(): Ball = {    val r = scala.util.Random;    val position = new Position(10,10);    val velocity = new Velocity(0,0);    new Ball(Math.round(r.nextFloat*100),position,velocity);  };}